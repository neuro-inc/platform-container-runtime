name: CI

on:
  push:
    branches: [master]
    tags: [v*.*, v*.*.*]
  pull_request:
    branches: [master]
  pull_request_target:
    branches: [master]
  schedule:
  - cron: 0 4 * * *

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    if: |
      (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]') ||
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]')
    env:
      AWS_ACCOUNT_ID: 771188043543
      AWS_REGION: us-east-1
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Cache packages
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: make setup
    - name: Lint
      run: |
        echo "::add-matcher::.github/actionlint-matcher.json"
        make lint
    - name: Run unit tests
      run: make test_unit
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: .coverage-unit.xml
        flags: unit
        name: codecov-unit
    - name: Build Docker image
      run: make docker_build
      env:
        TAG: latest
    - name: Upload image artifact
      uses: neuro-inc/upload-image-action@v21.9.2
      with:
        image: platformcontainerruntime
        token: ${{ secrets.GITHUB_TOKEN }}
  test_integration:
    name: Run integration tests
    runs-on: ubuntu-latest
    if: |
      (github.event_name != 'pull_request_target' && github.actor != 'dependabot[bot]') ||
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]')
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
        - container_runtime: docker
          driver: none
        - container_runtime: containerd
          driver: docker
        # - container_runtime: cri-o
        #   driver: docker
    env:
      MINIKUBE_DRIVER: ${{ matrix.driver }}
      MINIKUBE_K8S_VERSION: 1.20.9
      MINIKUBE_CONTAINER_RUNTIME: ${{ matrix.container_runtime }}
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Cache packages
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py-3.8-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('setup.cfg')
          }}
    - name: Install dependencies
      run: make setup
    - name: Start minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo apt-get update
        sudo apt-get install -y conntrack
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        minikube start \
          --wait=all \
          --wait-timeout=10m0s \
          --force="true" \
          --driver="$MINIKUBE_DRIVER" \
          --kubernetes-version="$MINIKUBE_K8S_VERSION" \
          --container-runtime="$MINIKUBE_CONTAINER_RUNTIME"
        sudo chown -R $USER $HOME/.kube /root/.minikube
        sudo chmod -R a+r $HOME/.kube /root/.minikube
        sudo find /root/.minikube -name id_rsa -exec chmod 600 {} \;
    - name: Run integration tests
      run: make test_integration
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: .coverage-integration.xml
        flags: integration
        name: codecov-integration
  deploy_dev:
    name: Deploy to dev
    environment: dev
    runs-on: ubuntu-latest
    needs: test_integration
    concurrency: deploy_dev
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    env:
      AWS_ACCOUNT_ID: 771188043543
      AWS_REGION: us-east-1
      AZURE_ACR_NAME: ${{ secrets.AZURE_DEV_ACR_NAME }}
      AZURE_REGION: ${{ secrets.AZURE_DEV_REGION }}
      AZURE_RG_NAME: ${{ secrets.AZURE_DEV_RG_NAME }}
      CLUSTER_NAME: aws-dev
      HELM_ENV: dev
      IMAGE_REGISTRY: aws
    steps:
    - name: Checkout commit
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.7.0
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to AWS ECR
      uses: aws-actions/amazon-ecr-login@v1
    - name: Set image tag
      run: echo "IMAGE_TAG=$GITHUB_SHA" >> $GITHUB_ENV
    - name: Push image to registry
      run: make docker_push
    - name: Update kube config
      run: aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
    - name: Deploy to kubernetes
      run: make helm_deploy
