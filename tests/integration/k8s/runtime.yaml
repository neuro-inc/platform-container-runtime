apiVersion: v1
kind: ConfigMap
metadata:
  name: runtime-nginx-conf
data:
  docker-nginx.conf: |-
    user root root;

    events {}

    http {
        access_log /dev/stdout;
        error_log /dev/stderr;

        map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
        }

        server {
            listen 8080;
            location / {
                proxy_pass http://unix:/hrun/docker.sock:/;
                proxy_buffering off;
                proxy_cache off;
                proxy_read_timeout 300s;  # 60s by default
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade;
                proxy_request_buffering off;
                proxy_socket_keepalive on;
            }
        }
    }
  containerd-nginx.conf: |-
    user root root;

    events {}

    http {
        access_log /dev/stdout;
        error_log /dev/stderr;

        server {
            listen 8080 http2;

            location / {
                grpc_pass unix:/hrun/containerd/containerd.sock;
            }
        }
    }
  crio-nginx.conf: |-
    user root root;

    events {}

    http {
        access_log /dev/stdout;
        error_log /dev/stderr;

        server {
            listen 8080 http2;

            location / {
                grpc_pass unix:/hrun/crio/crio.sock;
            }
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: runtime
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  selector:
    matchLabels:
      service: runtime
  template:
    metadata:
      labels:
        service: runtime
    spec:
      containers:
      - name: runtime
        image: nginx
        command: [bash]
        args:
        - -ec
        - |
            if [[ -S /hrun/docker.sock ]]
            then
              cp /etc/nginx-conf/docker-nginx.conf /etc/nginx/nginx.conf
            elif [[ -S /hrun/containerd/containerd.sock ]]
            then
              cp /etc/nginx-conf/containerd-nginx.conf /etc/nginx/nginx.conf
            elif [[ -S /hrun/crio/crio.sock ]]
            then
              cp /etc/nginx-conf/crio-nginx.conf /etc/nginx/nginx.conf
            fi

            nginx -g "daemon off;"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx-conf
        - name: host-run
          mountPath: /hrun
      volumes:
      - name: nginx-conf
        configMap:
          name: runtime-nginx-conf
      - name: host-run
        hostPath:
          path: /run
---
apiVersion: v1
kind: Service
metadata:
  name: runtime
spec:
  type: LoadBalancer
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    service: runtime
